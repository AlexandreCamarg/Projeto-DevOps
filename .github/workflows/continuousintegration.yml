name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'   # ou outra versão que você use

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Run pylint
        run: pylint .

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # se estiver usando GitHub Packages ou similar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}     # ex: docker.io, ghcr.io, etc
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY_URL }}/$GITHUB_REPOSITORY:latest
            ${{ secrets.DOCKER_REGISTRY_URL }}/$GITHUB_REPOSITORY:${{ github.sha }}
          platforms: linux/amd64,linux/arm64

  discord:
    name: Notify via Discord
    runs-on: ubuntu-latest
    if: always()    # garante que vai rodar mesmo se jobs anteriores falharem
    needs: [lint, docker]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Send Discord Notification
        uses: Sniddl/discord-commits@v1.6
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK }}
          # Pode adicionar mais opções, dependendo da action: título, cor, etc.

